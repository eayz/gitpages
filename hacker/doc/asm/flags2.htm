<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>各种标志位的含义</title>
<link rel=stylesheet href="Assember.css">
<base target="_self">
</head>

<body>

<h2>一、运算结果标志位</h2>
<h3>1、进位标志CF(Carry Flag)</h3>        
<p style="text-indent: 21.25pt">进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p>      
<p style="text-indent: 21.25pt">使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。</p>      
<h3>2、<a name="PF">奇偶标志</a>PF(Parity Flag)</h3>        
<p style="text-indent: 21.25pt">奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p>      
<p style="text-indent: 21.25pt">利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。</p>      
<h3>3、<a name="AF">辅助进位标志</a>AF(Auxiliary Carry Flag)</h3>        
<p style="text-indent: 21.25pt">在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</p>      
<p style="margin-left: 40PT">(1)、在字操作时，发生低字节向高字节进位或借位时；<br> 
(2)、在字节操作时，发生低4位向高4位进位或借位时。</p>      
<p style="text-indent: 21.25pt">对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。</p>      
      
<h3>4、<a name="ZF">零标志</a>ZF(Zero Flag)</h3>        
<p style="text-indent: 21.25pt">零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p>      
<h3>5、<a name="SF">符号标志</a>SF(Sign Flag)</h3>        
<p style="text-indent: 21.25pt">符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。</p>      
<h3>6、<a name="OF">溢出标志</a>OF(Overflow Flag)</h3>        
<p style="text-indent: 21.25pt">溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p>      
<p style="text-indent: 21.25pt">“溢出”和“进位”是两个不同含义的概念，不要混淆。如果不太清楚的话，请查阅《计算机组成原理》课程中的有关章节。</p>      
      
<h2><a name="TF">二、状态控制标志位</a></h2>    
<p style="text-indent: 21.25pt">状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。</p>    
<h3>1、追踪标志TF(Trap Flag)</h3>      
<p style="text-indent: 21.25pt">当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。</p>     
<p style="text-indent: 21.25pt">指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。</p>     
<h3>2、<a name="IF">中断允许标志</a>IF(Interrupt-enable       
Flag)</h3>     
<p style="text-indent: 21.25pt">中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：</p>     
<p style="text-indent: 21.25pt">(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；</p>     
<p style="text-indent: 21.25pt">(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</p>     
<p style="text-indent: 21.25pt">CPU的指令系统中也有专门的指令来改变标志位IF的值。</p>     
<h3>3、<a name="DF">方向标志</a>DF(Direction       
Flag)</h3>     
<p style="text-indent: 21.25pt">方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。具体规定在第5.2.11节――字符串操作指令――中给出。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p>     
<h2><a name="IOPL">三</a>、32位标志寄存器增加的标志位</h2>   
<h3>1、I/O特权标志IOPL(I/O Privilege Level)</h3>      
<p style="text-indent: 21.25pt">I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。</p>    
<h3>2、<a name="NT">嵌套任务标志</a>NT(Nested Task)</h3>      
<p style="text-indent: 21.25pt">嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：</p>    
<p style="text-indent: 21.25pt">(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；</p>    
<p style="text-indent: 21.25pt">(2)、当NT=1，通过任务转换实现中断返回。</p>    
<h3>3、<a name="RF">重启动标志</a>RF(Restart Flag)</h3>      
<p style="text-indent: 21.25pt">重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。</p>    
<h3><a name="VM">4</a>、虚拟8086方式标志VM(Virtual 8086 Mode)</h3>      
<p style="text-indent: 21.25pt">如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。</p>    
     
</body>     
     
</html>     
