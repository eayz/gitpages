<html>

<head>
<meta http-equiv="Content-Language" content="zh-cn">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>7.3.3 堆栈传递参数</title>
<link rel=stylesheet href="Assember.css">
<script LANGUAGE="javascript" src="Assember.js"></script>
<script language="JavaScript1.2" src="menus.js"></script>
<script language="JavaScript1.2" src="chapter07.js"></script>
<SCRIPT ID=clientEventHandlersJS LANGUAGE=javascript>
<!--

function PUSH1_onmouseover() {
	PUSH1.src = "textbookIMG\\07-6B-d.gif";
}

function PUSH1_onmouseout() {
	PUSH1.src = "textbookIMG\\07-6B.gif";
}

function PUSH2_onmouseover() {
	PUSH2.src = "textbookIMG\\07-7B-d.gif";
}

function PUSH2_onmouseout() {
	PUSH2.src = "textbookIMG\\07-7B.gif";
}

//-->
</SCRIPT>
</head>

<body topmargin="1" leftmargin="0" background="TextBookIMG/background.gif">
<script language="JavaScript1.2">fwLoadMenus();</script>

<table border="0" width="100%" cellspacing="0" cellpadding="0">
  <tr>
    <td width="100%" colspan="2">
  <p align="center">
  <img border="0" src="images/btitle07.gif" width="778" height="70"></p>
    </td> 
  </tr>
  <tr>
    <td width="100%" colspan="2">
      <p align="center"><a href="index.htm"><img border="0" id="Home0" src="Button/home1.gif" LANGUAGE="javascript" onmouseover="return Home0_onmouseover()" onmouseout="return Home0_onmouseout()" width="96" height="28"></a><a href="homework.htm"><img border="0" id="Homework" language="javascript" onmouseout="return  Homework_onmouseout()" onmouseover="return Homework_onmouseover()" src="Button/homework1.gif" width="96" height="28"></a><a href="bbs/index.asp"><img border="0"  id="Discuss" language="javascript" onmouseout="return  Discuss_onmouseout()" onmouseover="return Discuss_onmouseover()" src="Button/discuss1.gif" width="96" height="28"></a><a href="question.htm"><img border="0"  id="Problem" language="javascript" onmouseout="return  Problem_onmouseout()" onmouseover="return Problem_onmouseover()" src="Button/problem1.gif" width="96" height="28"></a><a href="test.asp"><img border="0"  id="Test" language="javascript" onmouseout="return  Test_onmouseout()" onmouseover="return Test_onmouseover()" src="Button/test1.gif" width="96" height="28"></a><a href="search.htm"><img border="0"  id="Search" language="javascript" onmouseout="return  Search_onmouseout()" onmouseover="return Search_onmouseover()" src="Button/search1.gif" width="96" height="28"></a></td> 
  </tr>
  <tr>
    <td width="50%">
    <a href="#" onMouseOut="FW_startTimeout();"  onMouseOver="window.FW_showMenu(window.fw_menu_0,50,115);" >          
    <img name="menu1" src="TextBookIMG/menu.gif" border="0" width="51" height="12"></a>
    → <a href="07-3.htm">子程序的参数传递</a>                                           
      → 堆栈传递参数</td>                                                          
    <td width="50%">        
      <p align="right"><!--webbot bot="Validation" B-Disallow-First-Item="TRUE"
      --><select name="chapter1" onchange="location.href=chapter1.options[chapter1.selectedIndex].value" id="Chapter1" size="1">
        <option selected value="#">课件章节</option>
        <option value="course.htm">网络课件目录</option>
        <option value="01-1.htm">第1章 预备知识</option>
        <option value="02-1.htm">第2章 CPU资源和存储器</option>
        <option value="03-1.htm">第3章 操作数的寻址方式</option>
        <option value="04-1.htm">第4章 标识符和表达式</option>
        <option value="05-1.htm">第5章 微机CPU的指令系统</option>
        <option value="06-1.htm">第6章 程序的基本结构</option>
        <option value="07-1.htm">第7章 子程序和库</option>
        <option value="08-1.htm">第8章 输入输出和中断</option>
        <option value="09-1.htm">第9章 宏</option>
        <option value="10-1.htm">第10章 应用程序的设计</option>
        <option value="11-1.htm">第11章 数值运算协处理器</option>
        <option value="12-1.htm">第12章 汇编语言和C语言</option>
      </select></td>
  </tr>
</table>
   
<h3>7.3.3 堆栈传递参数</h3>                                          
<p style="text-indent: 21.25pt">堆栈是一个特殊的数据结构，它通常是用来保存程序的返回地址。当用它来传递参数时，势必会造成数据和返回地址混合在一起的局面，用起来要特别仔细。</p> 
<p style="text-indent: 21.25pt">具体做法如下：</p> 
<p style="text-indent: 21.25pt">(1)、当用堆栈传递入口参数时，要在调用子程序前把有关参数依次压栈，子程序从堆栈中取到入口参数；</p> 
<p style="text-indent: -24pt; margin-left: 45pt">(2)、当用堆栈传递出口参数时，要在子程序返回前，把有关参数依次压栈(这里还需要做点额外操作，要保证返回地址一定在栈顶)，调用程序就可以从堆栈中取到出口参数。</p> 
<p style="text-indent: 21.25pt">在通常情况下，我们用堆栈传入口参数，用寄存器传出口参数。</p>   
<p style="text-indent: 21.25pt"><font color="#FF00FF">1、用堆栈传递入口参数的调用方法：</font></p>   
<table border="0" width="100%" cellspacing="0" cellpadding="0">    
  <tr>    
    <td width="11%" rowspan="6" valign="top"></td>    
    <td width="97%" colspan="3">…</td>    
  </tr>    
  <tr>    
    <td width="8%">PUSH</td>    
    <td width="89%" colspan="2"> Para<sub>1</sub></td>      
  </tr>    
  <tr>    
    <td width="97%" colspan="3">…</td>    
  </tr>    
  <tr>    
    <td width="8%">PUSH</td>    
    <td width="22%"> Para<sub>n</sub></td>    
    <td width="67%">;把n个字的参数压栈</td>    
  </tr>     
  <tr>     
    <td width="8%">CALL</td>    
    <td width="22%"> SUBPRO</td> 
    <td width="67%">;调用子程序SUBPRO</td> 
  </tr>    
  <tr>    
    <td width="97%" colspan="3">…</td>    
  </tr>     
</table>    
<p style="text-indent: 21.25pt"><font color="#FF00FF">2、在子程序中取入口参数的方法：</font></p>   
<p style="text-indent: 21.25pt"><img border="0" src="TextBookIMG/redpoint.gif" width="20" height="10">、段内调用子程序</p> 
<p style="text-indent: 21.25pt">由于是段内调用，所以，CALL指令只把返回地址的偏移量(即IP的内容)压栈，如图7.6(a)所示。在进入子程序后，为了能读取传递过来的参数，需要用BP来访问堆栈，所以要先保护BP原来的值，再把当前SP的值传送给BP。</p> 
<p style="text-indent: 21.25pt">于是，当前BP所指向的堆栈单元与最后一个参数Paran之间隔着BP的原值和返回地址的偏移量，也就是说：二者之间相差4个字节。具体情况如图7.6(b)所示。 
<table border="0" width="100%" cellpadding="0"> 
  <tr> 
    <td width="50%"> 
      <p align="center">　<img border="0" src="TextBookIMG/07-6a.gif" width="140" height="181"></p> 
    </td> 
    <td width="50%"> 
      <p align="center">　<img border="0" src="TextBookIMG/07-6b.gif" id=PUSH1 LANGUAGE=javascript onmouseover="return PUSH1_onmouseover()" onmouseout="return PUSH1_onmouseout()" width="196" height="181"></p> 
    </td> 
  </tr> 
  <tr> 
    <td width="50%" align="center">(a)、进入子程序时堆栈情况</td> 
    <td width="50%" align="center">   
(b)、子程序寄存器保护后的堆栈情况</td> 
  </tr> 
  <tr> 
    <td width="100%" colspan="2"> 
      <p align="center">图7.6 在段内调用情况下子程序所能访问的堆栈情况</td>                                         
  </tr> 
</table> 
<p style="text-indent: 21.25pt">在子程序中读取用堆栈传递参数的一般方法如下程序片段所示。</p> 
<table border="0" width="100%" cellpadding="0" cellspacing="0"> 
  <tr> 
    <td width="8%" rowspan="9" valign="top"></td> 
    <td width="9%" rowspan="8" valign="top">SUBPRO</td> 
    <td width="83%" colspan="3"> PROC&nbsp; NEAR</td>                                       
  </tr> 
  <tr> 
    <td width="6%">PUSH</td> 
    <td width="27%"> BP</td> 
    <td width="50%">;保护寄存器BP</td> 
  </tr> 
  <tr> 
    <td width="6%">MOV</td> 
    <td width="27%"> BP, SP</td>  
    <td width="50%">;用寄存器BP来访问堆栈，读取参数</td> 
  </tr> 
  <tr> 
    <td width="33%" colspan="2">…</td> 
    <td width="50%">;保护其它寄存器的指令</td> 
  </tr> 
  <tr> 
    <td width="6%">MOV</td> 
    <td width="27%">Para<sub>n</sub>, [BP+4]</td> 
    <td width="50%">;保护其它寄存器的指令</td> 
  </tr> 
  <tr> 
    <td width="83%" colspan="3">…</td> 
  </tr> 
  <tr> 
    <td width="6%">MOV</td> 
    <td width="77%" colspan="2">Para<sub>1</sub>, [BP+4+2*(n-1)]</td> 
  </tr> 
  <tr> 
    <td width="83%" colspan="3">…</td> 
  </tr> 
  <tr> 
    <td width="9%">SUBPRO</td> 
    <td width="83%" colspan="3"> ENDP</td> 
  </tr> 
</table> 
<p style="text-indent: 21.25pt"><img border="0" src="TextBookIMG/redpoint.gif" width="20" height="10">、段间调用子程序</p>  
<p style="text-indent: 21.25pt">在段间调用子程序时，CALL指令会把返回地址的偏移量和段寄存器CS的内容都压栈，如图7.7(a)所示。在进入子程序后，与前面“段内调用子程序”一样，也需要用BP来读取传递过来的参数，所以，也要先保护BP原来的值，再把当前SP的值传送给BP。</p> 
<p style="text-indent: 21.25pt">这时，当前BP所指向的堆栈单元与最后一个参数Paran之间隔着BP的原值、返回地址的偏移量和段地址，所以，二者之间相差6个字节。具体情况如图7.7(b)所示。</p> 
<table border="0" width="100%" cellpadding="0" cellspacing="0"> 
  <tr> 
    <td width="50%"> 
      <p align="center"><img border="0" src="TextBookIMG/07-7A.gif" width="141" height="181"></p> 
    </td> 
    <td width="50%"> 
      <p align="center"><img border="0" src="TextBookIMG/07-7B.gif" id=PUSH2 LANGUAGE=javascript onmouseover="return PUSH2_onmouseover()" onmouseout="return PUSH2_onmouseout()" width="194" height="200"></p> 
    </td> 
  </tr> 
  <tr> 
    <td width="50%" align="center">(a)、进入子程序时堆栈情况</td> 
    <td width="50%" align="center">(b)、子程序寄存器保护后的堆栈情况</td> 
  </tr> 
  <tr> 
    <td width="100%" colspan="2"> 
      <p align="center">图7.7 在段间调用情况下子程序所能访问的堆栈情况</td>                                        
  </tr> 
</table> 
<p style="text-indent: 21.25pt">在段间调用时，除了多一个返回段地址外，其它的内容与“段内调用”的情况完全一致，所以，在读取第i个参数时，只要用[BP+6+4*(n-i)]代替[BP+4+2(n-i)]即可(假设每个参数都是字类型)。</p> 
      
<p align="right"><a href="index.htm"><img border="0" id="Home" src="Button/home1.gif" LANGUAGE="javascript" onmouseover="return Home_onmouseover()" onmouseout="return Home_onmouseout()" width="96" height="28"></a><a href="asp/QuestionIndex.asp-chapter=7&amp;sort=date"><IMG border=0 id=Question src="Button/question1.gif"  LANGUAGE=javascript onmouseover="return Question_onmouseover()" onmouseout="return Question_onmouseout()" width="96" height="28"></a><a href="07-3-2.htm"><img border="0" id="PrevPage" src="Button/prevpage1.gif" LANGUAGE="javascript" onmouseover="return PrevPage_onmouseover()" onmouseout="return PrevPage_onmouseout()" width="96" height="28"></a><a href="07-4.htm"><img border="0" id="NextPage" src="Button/NextPage1.gif" LANGUAGE="javascript" onmouseover="return NextPage_onmouseover()" onmouseout="return NextPage_onmouseout()" width="96" height="28"></a>                         
 <!--webbot bot="Validation" B-Disallow-First-Item="TRUE" -->    
<select name="chapter2" onchange="location.href=chapter2.options[chapter2.selectedIndex].value" id=Chapter2 size="1">         
    <option selected value="#">课件章节</option>
    <option value="course.htm">课件目录</option>
    <option value="01-1.htm">第1章 预备知识</option>     
    <option value="02-1.htm">第2章 CPU资源和存储器</option>     
    <option value="03-1.htm">第3章 操作数的寻址方式</option>     
    <option value="04-1.htm">第4章 标识符和表达式</option>     
    <option value="05-1.htm">第5章 微机CPU的指令系统</option>     
    <option value="06-1.htm">第6章 程序的基本结构</option>     
    <option value="07-1.htm">第7章 子程序和库</option>     
    <option value="08-1.htm">第8章 输入输出和中断</option>     
    <option value="09-1.htm">第9章 宏</option>     
    <option value="10-1.htm">第10章 应用程序的设计</option>     
    <option value="11-1.htm">第11章 数值运算协处理器</option>
    <option value="12-1.htm">第12章 汇编语言和C语言</option>
  </select></p>  
      
</body>      
      
</html>      
